rs.toolchain.select.cargo.bin.dir=选择 cargo binary 所在文件夹
rs.toolchain.select.stdlib.source.code.dir=选择标准库源代码所在文件夹
rs.toolchain.download.via.rustup=使用 rustup 下载
rs.toolchain.downloading.rust.stdlib=正在下载 Rust 标准库
rs.toolchain.installing.using.rustup=正在使用 Rustup 安装...
rs.toolchain.location=工具链位置：
rs.toolchain.version=工具链版本：
rs.toolchain.stdlib=标准库：
rs.expand.declarative.macros=展开声明式宏：
rs.expand.declarative.macros.comment=允许插件在处理声明式宏调用，以获取信息用于名称解析及类型推导
rs.use.experimental.name.resolution.engine=使用实验性的名称解析引擎
rs.inject.rust.language.into.documentation.comments=在文档注释中支持 Rust 语言注入
rs.macro.expansion.engine.disabled=禁用（仅在宏展开有问题时选择）
rs.macro.expansion.engine.old=使用旧引擎（不支持某些功能）
rs.macro.expansion.engine.new=使用新引擎

cargo.update.project.automatically.if.cargo.toml.changes=当 Cargo.toml 变更时自动更新项目
cargo.compile.all.project.targets.if.possible=尽可能的编译所有的项目目标
cargo.compile.all.project.targets.if.possible.comment=传递 <b>--all-target</b> 选项给 Cargo <b>build</b>/<b>check</b> 命令
cargo.offline.mode=离线模式
cargo.offline.mode.comment=传递 <b>--offline</b> 选项给 Cargo，不执行网络请求
cargo.external.linter=外部 Linter
cargo.external.linter.tool=外部工具：
cargo.external.linter.tool.comment=使用外部工具进行代码分析
cargo.external.linter.tool.arguments=附加参数：
cargo.external.linter.tool.arguments.comment=附加参数被传递到 <b>cargo check</b> 或 <b>cargo clippy</b> 命令
cargo.run.external.linter=运行外部 linter 来动态分析代码
cargo.run.external.linter.comment=启用外部 linter，根据使用的 linter 将结果高亮。\n可能会很耗费 CPU

rustfmt.use.rustfmt=使用 rustfmt 执行格式化，而不是程序内置的
rustfmt.run.rustfmt.on.save=在保存时运行 rustfmt
